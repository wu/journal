* Plenv shebang
  :PROPERTIES:
  :ID:       CCE505BA-A7B7-4AFD-A053-F5154E6A3DE0
  :END:

[[https://github.com/tokuhirom/plenv][Plenv]] is a great tool.  It is the perl version of ruby's [[https://github.com/sstephenson/rbenv][rbenv]].

After playing around with plenv for a while, I was hooked, and started
switching over all my projects.  Then I started seeing some strange
output from some of my cron jobs.  I was seeing error messages like
this in my logs/email on OS X:

#+begin_src sh
  line 3: use: command not found
  line 5: print: command not found

#+end_src

I looked at it long enough to see that it was confusing, and then I
put it on the back burner for a while.  A little while later, I
started seeing a similar problem on Solaris.  So I decided it was time
to look a little deeper.

I realized pretty quickly that my perl script was being executed by
bash rather than by perl.  So the obvious work-around was the secret
sauce from the perlrun manpage (see below).  But that was clearly a
hack, and I couldn't resist digging deeper to see where things went
awry.

** exercise the bug
   :PROPERTIES:
   :ID:       740A54C1-C4FA-4F69-9065-0005CABFC498
   :END:

Exercising the bug is a little bit tricky.  When I execute a perl
script directly on the command line that has the plenv perl shim in
the shebang, it works fine.

#+begin_src sh
  # create and test the perl script
  echo '#!'"$HOME/.plenv/shims/perl" > foo.pl
  echo 'print "testing 1 2 3\n";' >> foo.pl
  chmod a+x foo.pl
  ./foo.pl

  # output: testing 1 2 3

#+end_src

But when I call that same script from a shell script wrapper, it runs
into problems.  Note that the shell script must run the perl script
using the shebang to trigger the bug.

#+begin_src sh
  # create and run the shell script wrapper
  echo '#!/usr/bin/env bash' > foo.sh
  echo "./foo.pl" >> foo.sh
  chmod a+x foo.sh
  ./foo.sh

  # output: ./foo.pl: line 2: print: command not found

#+end_src

Interestingly the bug does not happen if the wrapper script is written in zsh:

#+begin_src sh
  # create and run the shell script wrapper
  echo '#!/usr/bin/env zsh' > foo.zsh
  echo "./foo.pl" >> foo.zsh
  chmod a+x foo.zsh
  ./foo.zsh

  # output: testing 1 2 3

#+end_src

** searching for a plenv bug
   :PROPERTIES:
   :ID:       BD5ADB8D-5081-48D7-8B7A-0B7B4E1C1CD9
   :END:

I started looking at the plenv scripts, hoping there might be an easy
fix.  The shebang in the perl script above points to plenv's perl
shim, which is actually a bash script.  The shim then runs this
command:

#+begin_src sh
  exec $HOME/.plenv/libexec/plenv exec perl foo.pl

#+end_src

The plenv script is also a bash script, which in turn runs:

#+begin_src sh
  exec $HOME/.plenv/libexec/plenv-exec perl foo.pl

#+end_src

And plenv-exec is also a bash script, which finally runs my script
with the appropriate version of the perl binary, like so:

#+begin_src sh
  exec -a perl $HOME/.plenv/versions/5.18.1/bin/perl foo.pl

#+end_src

Somewhere in the stack it was getting confusing and evaluating the
contents of foo.pl as if it were a bash script.

I started writing test cases to try and figure out exactly where
things were going wrong.  The results can be found [[https://gist.github.com/wu/8119651][here]]

I did some testing on multiple versions of a few operating systems,
and the issue affected OS X, FreeBSD, and Solaris--but not Linux.

I submitted a bug report for plenv [[https://github.com/tokuhirom/plenv/issues/63][here]], but I later closed the bug
since this appears to be more properly classified as an issue with
bash that affects plenv.

** subtracting plenv from the equation
   :PROPERTIES:
   :ID:       2C3F53F7-6025-4E42-9301-DB5E4B57567A
   :END:

Here is the underlying issue without plenv.

Start with a plenv-like shim, i.e. a bash script that execs perl.
Note that it must exec an actual perl binary, which is why it uses
/usr/bin/perl.  This should not point to your plenv shim.

#+begin_src sh
  # create the simplest possible shim
  echo '#!/usr/bin/env bash' > foo-shim
  echo 'echo exec /usr/bin/perl "$@"' >> foo-shim
  echo 'exec /usr/bin/perl "$@"' >> foo-shim
  chmod a+x foo-shim

#+end_src

Next, add a perl script that uses the shim in its shebang.

#+begin_src sh
  # create a perl script that uses the shim
  echo '#!'"$(pwd)/foo-shim" > foo.pl
  echo 'print "testing 1 2 3\n"' >> foo.pl
  chmod a+x foo.pl

#+end_src

And finally add the shell script wrapper.  When you execute the
wrapper, you see the bug.

#+begin_src sh
  # create a perl script that uses the shim
  echo '#!/usr/bin/env bash' > foo-wrapper.sh
  echo './foo.pl' >> foo-wrapper.sh
  chmod a+x foo-wrapper.sh
  ./foo-wrapper.sh

  # output: ./foo.pl: line 2: print: command not found

#+end_src

*** wtf
   :PROPERTIES:
   :ID:       5B837CBE-D532-44B5-8620-1B2929AD45F1
   :END:

A couple of strange things can be observed about the example above.

If you execute the foo.pl script in the example above on OS X or
FreeBSD, it will go into an infinite loop.  There is an 'echo'
statement in the shim to make it obvious what it is doing (without
that line it just appears to hang).

And now for the really weird part.  I thought this was common
knowledge:

#+begin_src sh
  # executes the script using the shebang
  /path/to/script.pl

  # completely ignores the shebang
  perl /path/to/script.pl

#+end_src

So I was not expecting this behavior:

#+begin_src sh

  # create the bash shim that execs perl
  echo '#!/usr/bin/env bash' > foo-shim
  echo 'echo exec /usr/bin/perl "$@"' >> foo-shim
  echo 'exec /usr/bin/perl "$@"' >> foo-shim
  chmod a+x foo-shim

  # create a perl script without a shebang
  echo 'print "testing 1 2 3\n"' >> foo1.pl

  # execute perl, passing in the path to the script
  /usr/bin/perl foo1.pl
  # output: testing 1 2 3

  # create an identical shell script plus a shebang
  echo '#!'"$(pwd)/foo-shim" > foo2.pl
  echo 'print "testing 1 2 3\n"' >> foo2.pl

  # execute perl, passing in the path to the script
  /usr/bin/perl foo2.pl

  # output: exec /usr/bin/perl foo2.pl  [infinite loop]

#+end_src

Why is it that the mere presence of a shebang line in the file changes
the behavior here--when in theory the shebang should not be involved?

This works without any issues on Linux.

Ok, and here's another one:

#+begin_src sh
  # create the bash shim that execs perl
  echo '#!/usr/bin/ruby' > foo
  echo 'puts("testing 1 2 3")' >> foo
  chmod a+x foo
  /usr/bin/perl foo

  # output: testing 1 2 3

#+end_src

Here I called the perl executable and passed it a path that happened
to contain a ruby script, and it appears that the shebang won!

** perlrun
   :PROPERTIES:
   :ID:       307F8E65-B71F-4E98-8B48-CF25D91B4D39
   :END:

The [[http://perldoc.perl.org/perlrun.html][perlrun manpage]] contains a bit of magic that will run a perl
script with perl if it is being evaluated in a shell.

#+begin_src sh
  #!/bin/sh
  eval 'exec perl -x -wS $0 ${1+"$@"}'
      if 0;

#+end_src

And that does the trick:

#+begin_src sh
  echo '#!'"$HOME/.plenv/shims/perl" > foo.pl
  echo "eval 'exec perl -x -wS \$0 \${1+\"\$@\"}'" >> foo.pl
  echo '    if 0;' >> foo.pl
  echo 'print "testing 1 2 3\n";' >> foo.pl
  chmod a+x foo.pl
  ./foo.pl
  # output: testing 1 2 3

  echo '#!/usr/bin/env bash' > foo.sh
  echo "./foo.pl" >> foo.sh
  chmod a+x foo.sh
  ./foo.sh
  # output: testing 1 2 3

#+end_src

** nested shebang
   :PROPERTIES:
   :ID:       0EDED161-2458-4C19-A6B3-1595A9A996A3
   :END:

I started searching and found a number of older references including
[[http://lists.netisland.net/archives/phlpm/phlpm-2000/msg00391.html][this one]] mentioning that bash does not support 'nested shebangs', i.e
a shebang that points at a script that itself begins with a shebang.
There is some great information [[http://www.in-ulm.de/~mascheck/various/shebang/#interpreter-script][here]].  I did not find any problems
with nested shebangs on recent versions of bash on any OS I tried.

#+begin_src sh
  # create the simplest possible bash shim
  echo '#!/usr/bin/env bash' > foo-shim.sh
  echo 'exec bash "$@"' >> foo-shim.sh
  chmod a+x foo-shim.sh

  # create a bash script that uses the shim
  echo '#\!'"$(pwd)/foo-shim.sh" > foo.sh
  echo 'echo "testing 1 2 3"' >> foo.sh
  chmod a+x foo.sh
  ./foo.sh

  # output: testing 1 2 3

#+end_src

** rbenv
   :PROPERTIES:
   :ID:       764A33B7-DB6E-44EA-8FA9-D04663D7DE58
   :END:

From my cursory comparison, it seems that the plenv bash scripts are
mostly rbenv with s/rbenv/plenv/g and s/ruby/perl/g.  So I was
assuming this bug would also affect rbenv.  And it appears that is true:

#+begin_src sh
  # create and test the ruby script
  echo '#!/opt/boxen/rbenv/shims/ruby' > foo.rb
  echo 'puts("testing 1 2 3")' >> foo.rb
  chmod a+x foo.rb
  ./foo.rb
  # output: testing 1 2 3

  # create the shell script wrapper
  echo '#!/usr/bin/env bash' > foo.sh
  echo "./foo.rb" >> foo.sh
  chmod a+x foo.sh
  ./foo.sh
  # output: ./foo.rb: line 2: syntax error near unexpected token `"testing 1 2 3"'
  # output: ./foo.rb: line 2: `puts("testing 1 2 3")'

#+end_src
